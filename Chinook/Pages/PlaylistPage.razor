@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]
@inject IPlayListService PlayListService
@inject NavigationManager NavigationManager
@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using Chinook.Services;
@using Chinook.ClientModels;

@if (playList!=null && !String.IsNullOrEmpty(playList.Name))
{
    
<h1>Playlist <strong>@playList.Name</strong><a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemovePlayList())" @onclick:preventDefault><i class="bi bi-trash"></i></a></h1>

}
@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (playList == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in playList?.Tracks)
            {
                @if (!String.IsNullOrEmpty(playList.Name))
                {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (playList.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private ClientModels.Playlist playList;
    protected override async Task OnParametersSetAsync()
    {
        await PlayListService.Initialize(CurrentUserId);
        playList=await PlayListService.InitializePlayListData(PlaylistId,CurrentUserId);
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();
        await InvokeAsync(StateHasChanged);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        PlayListService.RemoveTrackFromExistingPlayList(PlaylistId,trackId);
        InvokeAsync(StateHasChanged);
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
    private void RemovePlayList()
    {
        PlayListService.RemovePlayList(PlaylistId);
        NavigationManager.NavigateTo("/");
    }
    

}
