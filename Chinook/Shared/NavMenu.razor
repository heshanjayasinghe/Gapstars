@inject IPlayListService PlayListService
@using System.Security.Claims;
@using Chinook.Services;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="playlist/1">
                <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
            </NavLink>
        </div>
            @foreach (var list in playlists)
            {
                <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"playlist/{list.PlaylistId}")">
                    <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>@list.Playlist.Name
                </NavLink>
                </div>
            }
    </nav>
</div>

@code {
    string CurrentUserId;
    List<Chinook.Models.UserPlaylist> playlists;
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);
        await PlayListService.Initialize(CurrentUserId);

        playlists=await PlayListService.GetAllPlayLists(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
